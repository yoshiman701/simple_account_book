from django.shortcuts import renderfrom .forms import CategoryForm,MoneyFormfrom .calendar_mixins import MonthWithScheduleMixinfrom .models import Category,Money from django.views.generic import CreateView,TemplateView,FormViewfrom django.urls import reverse_lazyimport datetimeimport matplotlib#バックエンドを指定matplotlib.use('svg')#matplotlib.use('TkAgg')import matplotlib.pyplot as pltimport japanize_matplotlibimport base64import ioclass DetailWeekView(MonthWithScheduleMixin,FormView):    template_name = "first_calendar/include/week.html"    form_class = MoneyForm    form = MoneyForm()    date_field = 'date'    model = Money        def post(self, request, *args, **kwargs):        year = self.kwargs.get('year')        month = self.kwargs.get('month')        day = self.kwargs.get('day')        data_base = Money.objects.filter(date=datetime.date(year=year,month=month,day=day))        if data_base.first() == None:            form = MoneyForm(request.POST)        else:            form = MoneyForm(request.POST,instance=Money.objects.get(date=datetime.date(year=year,month=month,day=day)))#Money.objects.get(date=date_serial)        if form.is_valid():            time = form.save(commit=False)            time.date = datetime.date(year=year,month=month,day=day)            time.save()            return render(request, 'first_calendar/include/week.html', self.get_context_data(**kwargs))             else:            return self.form_invalid(form)        def get_context_data(self, **kwargs):        context = super().get_context_data(**kwargs)        calendar_context = self.get_month_calendar()        context.update(calendar_context)        year = self.kwargs.get('year')        month = self.kwargs.get('month')        day = self.kwargs.get('day')        for week_schedule in context['month_day_schedules']:            for year_week_day in week_schedule.keys():                if datetime.date(year=year,month=month,day=day) == year_week_day:                    context['week_schedules'] = week_schedule        x = []        y = {}        for c in context['categorys']:            y[c] = []                for k,v in context['week_schedules'].items():            x.append(str(k.month) + "/" + str(k.day))                        for i,c in enumerate(context['categorys']):                if i == 0:                    y[c].append(v[0].money_a)                elif i == 1:                    y[c].append(v[0].money_b)                elif i == 2:                    y[c].append(v[0].money_c)                elif i == 3:                    y[c].append(v[0].money_d)        graph = {}                   for category,y in y.items():            graph['graph_' + category] = self.setPlt(x,y,category)        context["graph"] = graph            return context          def setPlt(self,x,y,category):        plt.xlabel("Date")        plt.ylabel("yen")        plt.plot(x, y, color='red', marker='o', label=category)        plt.legend()        buf = io.BytesIO()        plt.savefig(buf, format='svg')        graph = base64.b64encode(buf.getvalue())        graph = graph.decode("utf-8")        plt.clf()        return graph    class OneMonthView(MonthWithScheduleMixin,TemplateView):    template_name = "first_calendar/month.html"    date_field = 'date'    model = Money        def get_context_data(self, **kwargs):        context = super().get_context_data(**kwargs)        calendar_context = self.get_month_calendar()        context.update(calendar_context)        return contextclass CategoryView(CreateView):     template_name = 'first_calendar/category.html'    model = Category    form_class = CategoryForm    success_url = reverse_lazy("first_calendar:category")           def form_valid(self, form):        if Category(id = 1) == None:            Category.objects.create(category_a=form['category_a'].value(),                                     category_b=form['category_b'].value(),                                     category_c=form['category_c'].value(),                                     category_d=form['category_d'].value())        else:            Category.objects.update(category_a=form['category_a'].value(),                                     category_b=form['category_b'].value(),                                     category_c=form['category_c'].value(),                                     category_d=form['category_d'].value())                return super().form_valid(form)