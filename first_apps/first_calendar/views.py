from django.shortcuts import renderfrom .forms import CategoryForm,MoneyFormfrom .calendar_mixins import MonthWithScheduleMixinfrom .models import Category,Money from django.views.generic import CreateView,TemplateView,FormViewfrom django.urls import reverse_lazyimport datetimeimport matplotlib#バックエンドを指定matplotlib.use('Agg')import matplotlib.pyplot as pltimport iofrom django.http import HttpResponse    def setPlt(self):    x = ["07/01", "07/02", "07/03", "07/04", "07/05", "07/06", "07/07"]    y = [3, 5, 0, 5, 6, 10, 2]    plt.bar(x, y, color='#00d5ff')    plt.title(r"$\bf{Running Trend  -2020/07/07}$", color='#3407ba')    plt.xlabel("Date")    plt.ylabel("km")# SVG化def plt2svg(self):    buf = io.BytesIO()    plt.savefig(buf, format='svg', bbox_inches='tight')    s = buf.getvalue()    buf.close()    return s# 実行するビュー関数def get_svg(self,request):    self.setPlt()      svg = self.plt2svg()  #SVG化    plt.cla()  # グラフをリセット    response = HttpResponse(svg, content_type='image/svg+xml')    return responseclass DetailWeekView(MonthWithScheduleMixin,FormView):    template_name = "first_calendar/include/week.html"    form_class = MoneyForm    form = MoneyForm()    date_field = 'date'    model = Money        def post(self, request, *args, **kwargs):        year = self.kwargs.get('year')        month = self.kwargs.get('month')        day = self.kwargs.get('day')        data_base = Money.objects.filter(date=datetime.date(year=year,month=month,day=day))        if data_base.first() == None:            form = MoneyForm(request.POST)        else:            form = MoneyForm(request.POST,instance=Money.objects.get(date=datetime.date(year=year,month=month,day=day)))#Money.objects.get(date=date_serial)        if form.is_valid():            time = form.save(commit=False)            time.date = datetime.date(year=year,month=month,day=day)            time.save()            return render(request, 'first_calendar/include/week.html', self.get_context_data(**kwargs))             else:            return self.form_invalid(form)        def get_context_data(self, **kwargs):        context = super().get_context_data(**kwargs)        calendar_context = self.get_month_calendar()        context.update(calendar_context)        year = self.kwargs.get('year')        month = self.kwargs.get('month')        day = self.kwargs.get('day')        for week_schedule in context['month_day_schedules']:            for year_week_day in week_schedule.keys():                if datetime.date(year=year,month=month,day=day) == year_week_day:                    context['week_schedules'] = week_schedule                            return context  class OneMonthView(MonthWithScheduleMixin,TemplateView):    template_name = "first_calendar/month.html"    date_field = 'date'    model = Money        def get_context_data(self, **kwargs):        context = super().get_context_data(**kwargs)        calendar_context = self.get_month_calendar()        context.update(calendar_context)        return contextclass CategoryView(CreateView):     template_name = 'first_calendar/category.html'    model = Category    form_class = CategoryForm    success_url = reverse_lazy("first_calendar:category")           def form_valid(self, form):        if Category(id = 1) == None:            Category.objects.create(category_a=form['category_a'].value(),                                     category_b=form['category_b'].value(),                                     category_c=form['category_c'].value(),                                     category_d=form['category_d'].value())        else:            Category.objects.update(category_a=form['category_a'].value(),                                     category_b=form['category_b'].value(),                                     category_c=form['category_c'].value(),                                     category_d=form['category_d'].value())                return super().form_valid(form)