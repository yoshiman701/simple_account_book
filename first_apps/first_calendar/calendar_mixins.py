import calendarfrom collections import dequeimport datetimeimport itertoolsfrom django import formsfrom .models import Schedule,Money,Categoryimport matplotlib#バックエンドを指定matplotlib.use('Agg')import matplotlib.pyplot as pltimport iofrom django.http import HttpResponseclass BaseCalendarMixin:    """カレンダー関連Mixinの、基底クラス"""    first_weekday = 0  # 0は月曜から、1は火曜から。6なら日曜日からになります。お望みなら、継承したビューで指定してください。    week_names = ['月', '火', '水', '木', '金', '土', '日']  # これは、月曜日から書くことを想定します。['Mon', 'Tue'...    def setup_calendar(self):        """内部カレンダーの設定処理        calendar.Calendarクラスの機能を利用するため、インスタンス化します。        Calendarクラスのmonthdatescalendarメソッドを利用していますが、デフォルトが月曜日からで、        火曜日から表示したい(first_weekday=1)、といったケースに対応するためのセットアップ処理です。        """        self._calendar = calendar.Calendar(self.first_weekday)    def get_week_names(self):        """first_weekday(最初に表示される曜日)にあわせて、week_namesをシフトする"""        week_names = deque(self.week_names)        week_names.rotate(-self.first_weekday)  # リスト内の要素を右に1つずつ移動...なんてときは、dequeを使うと中々面白いです        return week_names class MonthCalendarMixin(BaseCalendarMixin):    """月間カレンダーの機能を提供するMixin"""    def get_previous_month(self, date):        """前月を返す"""        if date.month == 1:            return  date.replace(year=date.year-1, month=12, day=1)        else:            return  date.replace(month=date.month-1, day=1)    def get_next_month(self, date):        """次月を返す"""        if date.month == 12:           return  date.replace(year=date.year+1, month=1, day=1)        else:           return  date.replace(month=date.month+1, day=1)            def get_month_days(self, date):        """その月の全ての日を返す"""        return self._calendar.monthdatescalendar(date.year, date.month)        def get_current_month(self):        """pk"""        month = self.kwargs.get('month')        year = self.kwargs.get('year')                if month and year:            month = datetime.date(year=int(year), month=int(month), day=1)                    else:            month = datetime.date.today().replace(day=1)                    return month        def get_select_day(self):        month = self.kwargs.get('month')        year = self.kwargs.get('year')        day = self.kwargs.get('day')        if month and year and day:            month = datetime.date(year=int(year), month=int(month), day=int(day))         else:            month = datetime.date.today()        return month    def get_month_calendar(self):        """月間カレンダー情報の入った辞書を返す"""        self.setup_calendar()        current_month = self.get_current_month()        calendar_data = {            'now': datetime.date.today(),            'month_days': self.get_month_days(current_month),            'month_current': current_month,            'month_previous': self.get_previous_month(current_month),            'month_next': self.get_next_month(current_month),            'week_names': self.get_week_names(),            'categorys': self.get_category(),            'select_day': self.get_select_day(),        }        return calendar_data   class MonthWithScheduleMixin(MonthCalendarMixin):    """スケジュール付きの、月間カレンダーを提供するMixin"""    def get_month_schedules(self, start, end, days, categorys):        """それぞれの日とスケジュールを返す"""        lookup = {            # '例えば、date__range: (1日, 31日)'を動的に作る            '{}__range'.format(self.date_field): (start, end)        }        # 例えば、Schedule.objects.filter(date__range=(1日, 31日)) になる        queryset = self.model.objects.filter(**lookup)                # {1日のdatetime: 1日のスケジュール全て, 2日のdatetime: 2日の全て...}のような辞書を作る        day_schedules = {day: [] for week in days for day in week}               for money in queryset:            money_date = getattr(money, self.date_field)            day_schedules[money_date].append(money)        # day_schedules辞書を、周毎に分割する。[{1日: 1日のスケジュール...}, {8日: 8日のスケジュール...}, ...]        # 7個ずつ取り出して分割しています。        size = len(day_schedules)        return [{key: day_schedules[key] for key in itertools.islice(day_schedules, i, i+7)} for i in range(0, size, 7)]    def get_month_calendar(self):        calendar_context = super().get_month_calendar()        month_days = calendar_context['month_days']        categorys = calendar_context['categorys']        month_first = month_days[0][0]        month_last = month_days[-1][-1]        calendar_context['month_day_schedules'] = self.get_month_schedules(            month_first,            month_last,            month_days,            categorys        )        return calendar_context        def get_previous_month_calendar(self):        calendar_context = super().get_month_calendar()        month_days = calendar_context['month_previous']        categorys = calendar_context['categorys']        month_first = month_days[0][0]        month_last = month_days[-1][-1]        calendar_context['month_day_schedules'] = self.get_month_schedules(            month_first,            month_last,            month_days,            categorys        )        return calendar_context        def get_category(self):        if Category == None:            category = ["未設定","未設定","未設定","未設定"]        else:            a = Category.objects.values_list('category_a', flat=True).get(id=1)            b = Category.objects.values_list('category_b', flat=True).get(id=1)            c = Category.objects.values_list('category_c', flat=True).get(id=1)            d = Category.objects.values_list('category_d', flat=True).get(id=1)            category = [a,b,c,d]        return category        class DrawingMixin:        def setPlt(self,context):                x = []        y = []        for d in context['week_day_schedules']:            x.append(str(d.month)+"/"+str(d.day))         for v in context['week_day_schedules'].values():            if v == []:                y.append(0)            else:                y.append(v[0].money_a)        print(x)        print(y)                x = ["07/01", "07/02", "07/03", "07/04", "07/05", "07/06", "07/07"]        y = [3, 5, 0, 5, 6, 10, 2]        plt.bar(x,y,color='#00d5ff')        plt.title(r"$\bf{Running Trend  -2020/07/07}$", color='#3407ba')        plt.xlabel("Date")        plt.ylabel("km")        # SVG化    def plt2svg(self):        buf = io.BytesIO()        plt.savefig(buf, format='svg', bbox_inches='tight')        s = buf.getvalue()        buf.close()        return s        # 実行するビュー関数    def get_svg(self,context):        self.setPlt(context)          svg = self.plt2svg()  #SVG化        plt.cla()  # グラフをリセット        response = HttpResponse(svg, content_type='image/svg+xml')        return response       